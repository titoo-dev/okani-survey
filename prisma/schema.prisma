// Define database connection via the `DATABASE_URL` env var

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

// Define custom output path for generated Prisma Client

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Survey {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email       String
  stageReached String

  dossierId            String
  depositCity          String
  regularizationCity   String
  residenceCity        String
  userType             String
  legalEntity          String
  nationality          String

  depotEvaluation          String?
  depotPaymentMode         String?
  depotOtherPaymentMode    String?
  depotAmountPaid          String?
  depotHasReceipt          Boolean?
  depotHasAcknowledgment   Boolean?

  enqueteDelayPerceived    String?
  enquetePaymentMode       String?
  enqueteOtherPaymentMode  String?
  enqueteHasReceipt        Boolean?
  enqueteSatisfaction      String?

  etatLieuxDelayPerceived    String?
  etatLieuxPaymentMode       String?
  etatLieuxOtherPaymentMode  String?
  etatLieuxHasReceipt        Boolean?
  etatLieuxSatisfaction      String?

  affichageInTime             Boolean?
  affichageWasInformed        Boolean?
  affichageInformationChannel String?
  affichageSufficientDelay    Boolean?
  affichageHasOpposition      Boolean?
  affichageFees               String?
  affichageHasReceipt         Boolean?
  affichageSatisfaction       String?

  bornageDelayPerceived    String?
  bornagePaymentMode       String?
  bornageOtherPaymentMode  String?
  bornageHasReceipt        Boolean?
  bornageSatisfaction      String?

  evaluationPriceUnderstanding String?
  evaluationPaymentMode        String?
  evaluationOtherPaymentMode   String?
  evaluationHasReceipt         Boolean?
  evaluationSatisfaction       String?

  decisionDelay              String?
  decisionPaymentMode        String?
  decisionOtherPaymentMode   String?
  decisionHasReceipt         Boolean?
  wasTransmitted             Boolean?
  hasActeCession             Boolean?
  hasTitrePropriete          Boolean?
  decisionSatisfaction       String?

  hasUnofficialPayment Boolean?
  hasFavoritism        Boolean?
  trustTransparency    String?

  hadOpposition           Boolean?
  oppositionDate          String?
  oppositionNature        String?
  oppositionNatureOther   String?
  litigeDelay             String?
  paidLitigeFees          Boolean?
  litigePaymentMode       String?
  litigePaymentAmount     String?
  litigeHasReceipt        Boolean?
  wasInformedProcedure    Boolean?
  sentFormalLetter        Boolean?
  letterReference         String?
  litigeCause             String?
  litigeCauseOther        String?
  litigeSatisfaction      String?
  litigeOutcome           String?
  litigeOutcomeOther      String?
  litigeComments          String?

  totalDelay         String?
  transmissionDate   String?
  totalCost          String?
  globalSatisfaction String?
  generalSuggestions String?

  @@map("survey")
}

model Descriptor {
  id        String   @id @default(cuid())
  type      String
  value     String
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, value])
  @@map("descriptor")
}

